import React, { useState } from 'react';
import { Calendar, ChevronLeft, ChevronRight, Plus, Download, Users, CheckCircle, XCircle } from 'lucide-react';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { useProgramacionSemanal } from '../hooks/useProgramacion';
import { useCarteras } from '../hooks/useCarteras';
import { usePersonalList } from '../hooks/usePersonal';
import { ProgramacionCalendarioModal } from '../components/programacion/ProgramacionCalendarioModal';
import { useClientes, useNodos, useServiciosPage } from '../hooks/useServicios';
import { useQueryClient } from '@tanstack/react-query';
import { exportarPlanificacionPDF } from '../utils/pdfExporter';


export const CalendarioPage: React.FC = () => {
  const [vistaCalendario, setVistaCalendario] = useState<'planificacion' | 'semana' | 'dia' | 'semanal-completa'>('planificacion');
  const queryClient = useQueryClient();
  
  // Forzar actualizaci√≥n del hot reload
  
  // Estados para la planificaci√≥n semanal
  const [fechaInicioSemana, setFechaInicioSemana] = useState(() => {
    const hoy = new Date();
    const lunes = new Date(hoy);
    lunes.setDate(hoy.getDate() - hoy.getDay() + 1); // Lunes de esta semana
    return lunes;
  });
  
  // Estados para la integraci√≥n con la API
  const [showProgramacionCalendarioModal, setShowProgramacionCalendarioModal] = useState(false);
  const [vistaTabla, setVistaTabla] = useState<'simple' | 'jerarquica'>('jerarquica');
  
  // Estados para el modal de asignaci√≥n
  const [showAsignacionModal, setShowAsignacionModal] = useState(false);
  const [asignacionForm, setAsignacionForm] = useState({
    carteraId: 0,
    clienteId: 0,
    nodoId: 0,
    personalId: '',
    dias: {
      lunes: false,
      martes: false,
      miercoles: false,
      jueves: false,
      viernes: false,
      sabado: false,
      domingo: false
    },
    horasEstimadas: 8,
    observaciones: ''
  });
  
  // Hooks para datos
  const { data: carterasData } = useCarteras();
  const { data: clientesData } = useClientes({ limit: 1000 }); // Obtener todos los clientes
  const { data: nodosData } = useNodos({ limit: 1000 }); // Obtener todos los nodos
  
  // Hook alternativo para obtener datos de servicios (m√°s confiable)
  const { carteras: carterasServicios, clientes: clientesServicios, nodos: nodosServicios } = useServiciosPage('', 'carteras');
  
  
  // eslint-disable-next-line no-console
  const { data: nodosByClienteData } = useNodos({ 
    limit: 1000, 
    cliente_id: asignacionForm.clienteId && asignacionForm.clienteId > 0 ? asignacionForm.clienteId : undefined 
  }); // Obtener nodos del cliente seleccionado
  const { data: personalData } = usePersonalList();

  // Asignaciones: personal asignado (no se usa en la vista simplificada)
  // const { personalAsignadoCartera, isLoadingPersonalAsignado } = useAsignacionesResumen({ carteraId: undefined });
  
  // Hook para programaci√≥n semanal - obtener todas las carteras
  const {
    programacion,
    isLoading: isLoadingProgramacion,
    error: errorProgramacion,
    alternarDia,
    calcularTotalHoras,
    getTrabajadoresUnicos,
    isUpdating,
    isCreating
  } = useProgramacionSemanal(
    0, // Siempre obtener todas las carteras
    fechaInicioSemana.toISOString().split('T')[0]
  );

  
  
  
  


  // Funciones para la planificaci√≥n semanal
  const handleCambiarSemana = (direccion: 'anterior' | 'siguiente') => {
    const nuevaFecha = new Date(fechaInicioSemana);
    if (direccion === 'anterior') {
      nuevaFecha.setDate(nuevaFecha.getDate() - 7);
    } else {
      nuevaFecha.setDate(nuevaFecha.getDate() + 7);
    }
    setFechaInicioSemana(nuevaFecha);
  };

  const handleExportarPDF = async () => {
    try {
      // Debug: Log de datos originales
      // eslint-disable-next-line no-console
      console.log('üîç Datos de programaci√≥n originales:', programacion);
      // eslint-disable-next-line no-console
      console.log('üîç Fecha inicio semana:', fechaInicioSemana);
      
      // Convertir los datos de programaci√≥n al formato esperado por el exportador
      const asignacionesParaExportar: any[] = [];
      
      if (programacion && programacion.length > 0) {
        programacion.forEach((item: any) => {
          // eslint-disable-next-line no-console
          console.log('üîç Procesando item:', item);
          
          const dias = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'];
          const diasMap = {
            'lunes': 'LUN',
            'martes': 'MAR', 
            'miercoles': 'MIE',
            'jueves': 'JUE',
            'viernes': 'VIE',
            'sabado': 'SAB',
            'domingo': 'DOM'
          };

          // Crear una asignaci√≥n por cada d√≠a que est√© marcado
          dias.forEach(dia => {
            if (item[dia]) {
              // eslint-disable-next-line no-console
              console.log(`‚úÖ D√≠a ${dia} marcado para ${item.nombre_persona}`);
              asignacionesParaExportar.push({
                id: `${item.rut}-${item.nodo_id || item.cliente_id}-${dia}`,
                personalId: item.rut,
                personalNombre: item.nombre_persona,
                servicioId: item.nodo_id || item.cliente_id,
                servicioNombre: item.nombre_nodo || item.nombre_cliente,
                cliente: item.nombre_cliente,
                lugar: item.nombre_nodo || 'Sin ubicaci√≥n espec√≠fica',
                horaInicio: '08:00',
                horaFin: '17:00',
                dia: diasMap[dia as keyof typeof diasMap]
              });
            }
          });
        });
      }

      // Debug: Log de datos finales
      // eslint-disable-next-line no-console
      console.log('üîç Asignaciones para exportar:', asignacionesParaExportar);
      // eslint-disable-next-line no-console
      console.log('üîç Total asignaciones:', asignacionesParaExportar.length);

      // Exportar PDF
      await exportarPlanificacionPDF(fechaInicioSemana, asignacionesParaExportar);
    } catch (error) {
      // console.error('Error al exportar PDF:', error);
      alert('Error al exportar la programaci√≥n. Por favor, int√©ntalo de nuevo.');
    }
  };

  const handleAlternarDia = async (id: number, dia: string) => {
    try {
      await alternarDia(id, dia);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Error al alternar d√≠a:', error);
    }
  };



      // Validar que se haya seleccionado al menos un d√≠a
      const diasSeleccionados = Object.values(asignacionForm.dias).some(dia => dia);
      if (!diasSeleccionados) {
        alert('Por favor selecciona al menos un d√≠a');
        return;
      }

      // Obtener datos del personal seleccionado
      const personalSeleccionado = personalData?.data?.items?.find((p: any) => p.rut === asignacionForm.personalId);
      if (!personalSeleccionado) {
        alert('No se encontr√≥ el personal seleccionado');
        return;
      }

      // Validaci√≥n preventiva: verificar si ya existe programaci√≥n para evitar conflictos
      // eslint-disable-next-line no-console
      console.log('üîç Verificando si ya existe programaci√≥n para prevenir conflictos...');
      try {
        const { apiService } = await import('../services/api');
        const programacionExistente = await apiService.verificarProgramacion(
          asignacionForm.personalId,
          asignacionForm.carteraId,
          fechaInicioSemana.toISOString().split('T')[0]
        );
        
        if (programacionExistente.success && programacionExistente.data) {
          // eslint-disable-next-line no-console
          console.log('‚ö†Ô∏è Ya existe programaci√≥n para esta persona en esta cartera y semana');
          // eslint-disable-next-line no-console
          console.log('üìã Programaci√≥n existente:', programacionExistente.data);
          
          // Preguntar al usuario si quiere actualizar la programaci√≥n existente
          const nombrePersonal = (personalSeleccionado as any).nombres || personalSeleccionado.nombre || 'Personal';
          const confirmarActualizacion = window.confirm(
            `Ya existe una programaci√≥n para ${nombrePersonal} en la cartera seleccionada para esta semana.\n\n¬øDeseas actualizar la programaci√≥n existente con los nuevos datos?`
          );
          
          if (confirmarActualizacion) {
            // Proceder directamente a actualizar la programaci√≥n existente
            const updateData = {
              ...asignacionForm.dias,
              cliente_id: asignacionForm.clienteId || null,
              nodo_id: asignacionForm.nodoId || null,
              horas_estimadas: asignacionForm.horasEstimadas,
              observaciones: asignacionForm.observaciones || '',
              estado: 'programado'
            };
            
            // eslint-disable-next-line no-console
            console.log('üîÑ Actualizando programaci√≥n existente con ID:', programacionExistente.data.id);
            // eslint-disable-next-line no-console
            console.log('üìù Datos de actualizaci√≥n:', updateData);
            
            await apiService.actualizarProgramacion(programacionExistente.data.id, updateData);
            // eslint-disable-next-line no-console
            console.log('‚úÖ Programaci√≥n actualizada exitosamente');
            
            // Invalidar queries para refrescar los datos
            queryClient.invalidateQueries({ queryKey: ['programacion'] });
            await queryClient.refetchQueries({ queryKey: ['programacion'] });
            
            // Cerrar modal y limpiar formulario
            handleCerrarAsignacionModal();
            return;
          } else {
            // El usuario decidi√≥ no actualizar, cancelar la operaci√≥n
            // eslint-disable-next-line no-console
            console.log('‚ùå Usuario cancel√≥ la actualizaci√≥n de programaci√≥n existente');
            return;
          }
        }
      } catch (verificationError) {
        // eslint-disable-next-line no-console
        console.warn('‚ö†Ô∏è No se pudo verificar programaci√≥n existente, procediendo con la creaci√≥n:', verificationError);
        // Continuar con la creaci√≥n normal si la verificaci√≥n falla
      }

      // Crear la programaci√≥n con manejo de conflictos
      const programacionData = {
        rut: asignacionForm.personalId,
        cartera_id: asignacionForm.carteraId, // Usar cartera del formulario
        semana_inicio: fechaInicioSemana.toISOString().split('T')[0], // Agregar semana_inicio requerido
        cliente_id: asignacionForm.clienteId || undefined,
        nodo_id: asignacionForm.nodoId || undefined,
        ...asignacionForm.dias,
        horas_estimadas: asignacionForm.horasEstimadas,
        observaciones: asignacionForm.observaciones || undefined,
        estado: 'programado'
      };
      
      // eslint-disable-next-line no-console
      console.log('üöÄ Datos a enviar para crear programaci√≥n:', programacionData);
      // eslint-disable-next-line no-console
      console.log('üîç Formulario de asignaci√≥n:', asignacionForm);
      // eslint-disable-next-line no-console
      console.log('üë§ Personal seleccionado:', personalSeleccionado);
      // eslint-disable-next-line no-console
      console.log('üè¢ Cartera seleccionada:', asignacionForm.carteraId);
      // eslint-disable-next-line no-console
      console.log('üìÖ Fecha inicio semana:', fechaInicioSemana.toISOString().split('T')[0]);
      
      try {
        // eslint-disable-next-line no-console
        // console.log('üîÑ Llamando directamente a apiService.crearProgramacion con:', programacionData);
        const { apiService } = await import('../services/api');
        const result = await apiService.crearProgramacion(programacionData);
        // eslint-disable-next-line no-console
        console.log('‚úÖ Programaci√≥n creada exitosamente:', result);
        
        // Invalidar queries para refrescar los datos
        queryClient.invalidateQueries({ 
          queryKey: ['programacion'] 
        });
        // eslint-disable-next-line no-console
        console.log('üîÑ Queries invalidadas para refrescar datos');
        
        // Cerrar modal y limpiar formulario
        handleCerrarAsignacionModal();
      } catch (createError) {
        // eslint-disable-next-line no-console
        console.error('‚ùå Error al crear programaci√≥n:', createError);
        
        // Log detallado del error del servidor
        if (createError && typeof createError === 'object' && 'response' in createError) {
          const axiosError = createError as any;
          // eslint-disable-next-line no-console
          console.error('üìä Status del error:', axiosError.response?.status);
          // eslint-disable-next-line no-console
          console.error('üìä Datos del error:', axiosError.response?.data);
          // eslint-disable-next-line no-console
          console.error('üìä Mensaje del error:', axiosError.response?.data?.message);
          // eslint-disable-next-line no-console
          console.error('üìä Headers del error:', axiosError.response?.headers);
        }
        
        // Si es error 409, usar el ID de la programaci√≥n existente que viene en la respuesta
        if (createError && typeof createError === 'object' && 'response' in createError) {
          const axiosError = createError as any;
          if (axiosError.response?.status === 409) {
            // eslint-disable-next-line no-console
            console.log('‚ö†Ô∏è Conflicto detectado - usando ID de programaci√≥n existente de la respuesta');
            // eslint-disable-next-line no-console
            console.log('üîç Estructura completa de la respuesta 409:', axiosError.response.data);
            
            try {
              const { apiService } = await import('../services/api');
              
              // Intentar obtener el ID de la programaci√≥n existente de diferentes estructuras posibles
              let programacionExistente = null;
              let idExistente = null;
              
              // Estructura 1: axiosError.response.data.data.programacion_existente
              if (axiosError.response.data?.data?.programacion_existente) {
                programacionExistente = axiosError.response.data.data.programacion_existente;
                idExistente = programacionExistente.id;
              }
              // Estructura 2: axiosError.response.data.programacion_existente
              else if (axiosError.response.data?.programacion_existente) {
                programacionExistente = axiosError.response.data.programacion_existente;
                idExistente = programacionExistente.id;
              }
              // Estructura 3: axiosError.response.data.data (si es directamente el objeto de programaci√≥n)
              else if (axiosError.response.data?.data?.id) {
                programacionExistente = axiosError.response.data.data;
                idExistente = programacionExistente.id;
              }
              // Estructura 4: axiosError.response.data (si es directamente el objeto de programaci√≥n)
              else if (axiosError.response.data?.id) {
                programacionExistente = axiosError.response.data;
                idExistente = programacionExistente.id;
              }
              
              // eslint-disable-next-line no-console
              console.log('üîç Programaci√≥n existente encontrada en respuesta 409:', programacionExistente);
              // eslint-disable-next-line no-console
              console.log('üÜî ID de programaci√≥n existente:', idExistente);
              
              if (idExistente) {
                // Actualizar la programaci√≥n existente usando el ID de la respuesta
                const updateData = {
                  ...asignacionForm.dias,
                  cliente_id: asignacionForm.clienteId || null,
                  nodo_id: asignacionForm.nodoId || null,
                  horas_estimadas: asignacionForm.horasEstimadas,
                  observaciones: asignacionForm.observaciones || '',
                  estado: 'programado'
                };
                
                // eslint-disable-next-line no-console
                console.log('üîÑ Actualizando programaci√≥n existente con ID:', idExistente);
                // eslint-disable-next-line no-console
                console.log('üìù Datos de actualizaci√≥n:', updateData);
                
                await apiService.actualizarProgramacion(idExistente, updateData);
                // eslint-disable-next-line no-console
                console.log('‚úÖ Programaci√≥n actualizada exitosamente');
                
                // Invalidar queries para refrescar los datos
                // eslint-disable-next-line no-console
                console.log('üîÑ Invalidando queries con par√°metros:');
                // eslint-disable-next-line no-console
                console.log('üîÑ Todas las carteras activas');
                // eslint-disable-next-line no-console
                console.log('üîÑ Fecha inicio semana:', fechaInicioSemana.toISOString().split('T')[0]);
                
                // Invalidar query de programaci√≥n
                queryClient.invalidateQueries({ 
                  queryKey: ['programacion'] 
                });
                
                // Invalidar query de toda la semana
                queryClient.invalidateQueries({ 
                  queryKey: ['programacion', 'semana', fechaInicioSemana.toISOString().split('T')[0]] 
                });
                
                // Invalidar todas las queries de programaci√≥n para asegurar refresco
                queryClient.invalidateQueries({ 
                  queryKey: ['programacion'] 
                });
                
                // Forzar refetch inmediato de los datos
                // eslint-disable-next-line no-console
                console.log('üîÑ Forzando refetch inmediato de programaci√≥n...');
                await queryClient.refetchQueries({ 
                  queryKey: ['programacion'] 
                });
                
                // eslint-disable-next-line no-console
                console.log('üîÑ Queries invalidadas y refetch completado');
                
                // Cerrar modal y limpiar formulario
                handleCerrarAsignacionModal();
                return;
              } else {
                // eslint-disable-next-line no-console
                console.error('‚ùå No se pudo encontrar el ID de programaci√≥n existente en la respuesta 409');
                // eslint-disable-next-line no-console
                console.error('‚ùå Estructura de respuesta completa:', JSON.stringify(axiosError.response.data, null, 2));
                
                // Como fallback, intentar buscar la programaci√≥n existente por RUT, cartera y semana
                // eslint-disable-next-line no-console
                console.log('üîÑ Intentando buscar programaci√≥n existente como fallback...');
                try {
                  const programacionExistente = await apiService.verificarProgramacion(
                    asignacionForm.personalId,
                    asignacionForm.carteraId,
                    fechaInicioSemana.toISOString().split('T')[0]
                  );
                  
                  if (programacionExistente.success && programacionExistente.data?.id) {
                    // eslint-disable-next-line no-console
                    console.log('‚úÖ Programaci√≥n existente encontrada por verificaci√≥n:', programacionExistente.data);
                    
                    const updateData = {
                      ...asignacionForm.dias,
                      cliente_id: asignacionForm.clienteId || null,
                      nodo_id: asignacionForm.nodoId || null,
                      horas_estimadas: asignacionForm.horasEstimadas,
                      observaciones: asignacionForm.observaciones || '',
                      estado: 'programado'
                    };
                    
                    await apiService.actualizarProgramacion(programacionExistente.data.id, updateData);
                    // eslint-disable-next-line no-console
                    console.log('‚úÖ Programaci√≥n actualizada exitosamente usando verificaci√≥n');
                    
                    // Invalidar queries
                    queryClient.invalidateQueries({ queryKey: ['programacion'] });
                    await queryClient.refetchQueries({ queryKey: ['programacion'] });
                    
                    handleCerrarAsignacionModal();
                    return;
                  }
                } catch (verificationError) {
                  // eslint-disable-next-line no-console
                  console.error('‚ùå Error en verificaci√≥n de programaci√≥n existente:', verificationError);
                }
                
                // Si llegamos aqu√≠, no pudimos manejar el conflicto
                throw new Error('No se pudo encontrar ni actualizar la programaci√≥n existente. Por favor, verifica manualmente si ya existe una programaci√≥n para esta persona en esta cartera y semana.');
              }
            } catch (updateError) {
              // eslint-disable-next-line no-console
              console.error('‚ùå Error al actualizar programaci√≥n existente:', updateError);
              throw updateError;
            }
          } else {
            throw createError;
          }
        } else {
          throw createError;
        }
      }

      // Cerrar modal y limpiar formulario
      handleCerrarAsignacionModal();
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Error al crear asignaci√≥n:', error);
      
      // Proporcionar mensajes de error m√°s espec√≠ficos
      let errorMessage = 'Error al crear la asignaci√≥n. Por favor intenta nuevamente.';
      
      if (error && typeof error === 'object' && 'message' in error) {
        const errorObj = error as any;
        if (errorObj.message.includes('programaci√≥n existente')) {
          errorMessage = 'Ya existe una programaci√≥n para esta persona en esta cartera y semana. Se intent√≥ actualizar autom√°ticamente, pero hubo un problema. Por favor, verifica manualmente la programaci√≥n existente.';
        } else if (errorObj.message.includes('No se pudo encontrar')) {
          errorMessage = 'No se pudo encontrar la programaci√≥n existente para actualizar. Por favor, verifica que la persona est√© correctamente asignada a la cartera.';
        } else if (errorObj.response?.status === 400) {
          errorMessage = 'Los datos enviados no son v√°lidos. Por favor, verifica que todos los campos est√©n correctamente completados.';
        } else if (errorObj.response?.status === 500) {
          errorMessage = 'Error interno del servidor. Por favor, intenta nuevamente en unos momentos.';
        }
      }
      
      alert(errorMessage);
    }
  };

  // Funci√≥n para formatear fecha
  const formatearFecha = (fecha: Date) => {
    return fecha.toLocaleDateString('es-ES', { 
      day: '2-digit', 
      month: 'long', 
      year: 'numeric' 
    });
  };

  // Funci√≥n para obtener los d√≠as de la semana
  const getDiasSemana = () => {
    const dias = [];
    for (let i = 0; i < 7; i++) {
      const fecha = new Date(fechaInicioSemana);
      fecha.setDate(fechaInicioSemana.getDate() + i);
      dias.push({
        fecha,
        nombre: fecha.toLocaleDateString('es-ES', { weekday: 'short' }),
        numero: fecha.getDate(),
        mes: fecha.toLocaleDateString('es-ES', { month: 'short' })
      });
    }
    return dias;
  };

  // Funci√≥n para organizar datos jer√°rquicamente
  const organizarDatosJerarquicos = () => {
    if (!programacion || programacion.length === 0) return [];

    const datosOrganizados: any = {};

    programacion.forEach((item: any) => {
      const carteraId = item.cartera_id;
      const carteraNombre = item.nombre_cartera;
      const rut = item.rut;
      const nombrePersona = item.nombre_persona;
      const cargo = item.cargo;
      const clienteId = item.cliente_id;
      const clienteNombre = item.nombre_cliente;
      const nodoId = item.nodo_id;
      const nodoNombre = item.nombre_nodo;

      // Inicializar cartera si no existe
      if (!datosOrganizados[carteraId]) {
        datosOrganizados[carteraId] = {
          id: carteraId,
          nombre: carteraNombre,
          personal: {}
        };
      }

      // Inicializar personal si no existe
      if (!datosOrganizados[carteraId].personal[rut]) {
        datosOrganizados[carteraId].personal[rut] = {
          rut,
          nombre: nombrePersona,
          cargo,
          nodos: {}
        };
      }

      // Inicializar nodo si no existe
      const nodoKey = nodoId ? `${clienteId}-${nodoId}` : clienteId;
      if (!datosOrganizados[carteraId].personal[rut].nodos[nodoKey]) {
        datosOrganizados[carteraId].personal[rut].nodos[nodoKey] = {
          clienteId,
          clienteNombre,
          nodoId,
          nodoNombre,
          asignaciones: {
            lunes: false,
            martes: false,
            miercoles: false,
            jueves: false,
            viernes: false,
            sabado: false,
            domingo: false
          }
        };
      }

      // Asignar d√≠as de trabajo
      const dias = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'];
      dias.forEach(dia => {
        if (item[dia]) {
          datosOrganizados[carteraId].personal[rut].nodos[nodoKey].asignaciones[dia] = true;
        }
      });
    });

    return Object.values(datosOrganizados);
  };

  // Log de datos organizados despu√©s de la definici√≥n
  // eslint-disable-next-line no-console
  console.log('üìÖ Datos organizados jer√°rquicamente:', organizarDatosJerarquicos());

  // Funci√≥n para obtener color de cartera
  const getColorCartera = (carteraNombre: string) => {
    const colores: { [key: string]: string } = {
      'SNACK': 'bg-orange-100 border-orange-200',
      'Carozzi': 'bg-green-100 border-green-200',
      'Quantum': 'bg-blue-100 border-blue-200',
      'Cementaras': 'bg-blue-100 border-blue-200',
      'Puertos': 'bg-blue-200 border-blue-300',
      'Los Casta√±os': 'bg-pink-100 border-pink-200',
      'SOPROLE': 'bg-white border-gray-200',
      'Servicios': 'bg-white border-gray-200'
    };
    return colores[carteraNombre] || 'bg-gray-100 border-gray-200';
  };



  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6 fade-in">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Planificaci√≥n Semanal</h1>
          <p className="text-gray-600 mt-1">Gestiona las asignaciones de personal a carteras por semana</p>
          <div className="mt-2">
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              üìä Todas las Carteras ({carterasData?.data?.length || 0})
            </span>
          </div>
        </div>
        <div className="flex space-x-3">
          <button 
            onClick={() => setShowProgramacionCalendarioModal(true)}
            className="btn-primary hover-grow"
          >
            <Plus className="h-4 w-4" />
            Agregar Programaci√≥n
          </button>
          
        </div>
      </div>

      {/* Controles del calendario */}
      <div className="card hover-lift slide-up animate-delay-200 mb-6">
        <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
          <div className="flex items-center space-x-4">
            <button className="p-2 rounded-lg hover:bg-gray-100 transition-colors">
              <ChevronLeft className="h-5 w-5 text-gray-600" />
            </button>
            <h2 className="text-xl font-semibold text-gray-900">
              Planificaci√≥n Semanal
            </h2>
            <button className="p-2 rounded-lg hover:bg-gray-100 transition-colors">
              <ChevronRight className="h-5 w-5 text-gray-600" />
            </button>
          </div>
          
          <div className="flex space-x-2">
            {['semanal-completa', 'semana', 'dia'].map((vista) => (
              <button
                key={vista}
                onClick={() => setVistaCalendario(vista as 'semanal-completa' | 'semana' | 'dia')}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  vistaCalendario === vista
                    ? 'bg-primary-500 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {vista === 'semanal-completa' ? 'Programaci√≥n Semanal' : 
                 vista === 'semana' ? 'Vista Semana' : 
                 'Vista D√≠a'}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Vista de Planificaci√≥n Semanal */}
      {vistaCalendario === 'planificacion' && (
        <div className="space-y-6">
          {/* Controles de navegaci√≥n de semana */}
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => handleCambiarSemana('anterior')}
                  className="flex items-center px-3 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Semana Anterior
                </button>
                <div className="text-center">
                  <h3 className="text-lg font-semibold text-gray-900">
                    {formatearFecha(fechaInicioSemana)} - {formatearFecha(new Date(fechaInicioSemana.getTime() + 6 * 24 * 60 * 60 * 1000))}
                  </h3>
                  <p className="text-sm text-gray-600">Semana de planificaci√≥n</p>
                </div>
                <button
                  onClick={() => handleCambiarSemana('siguiente')}
                  className="flex items-center px-3 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Semana Siguiente
                  <ChevronRight className="h-4 w-4 ml-1" />
                </button>
            </div>
              <div className="flex items-center space-x-3">
                <div className="text-right">
                  <div className="text-sm text-gray-600">Total Programaciones</div>
                  <div className="text-2xl font-bold text-blue-600">{programacion.length}</div>
          </div>
                <div className="text-right">
                  <div className="text-sm text-gray-600">Personal Programado</div>
                  <div className="text-2xl font-bold text-green-600">
                    {getTrabajadoresUnicos().length}
          </div>
          </div>
                <div className="text-right">
                  <div className="text-sm text-gray-600">Total Horas</div>
                  <div className="text-2xl font-bold text-purple-600">{calcularTotalHoras()}</div>
          </div>
        </div>
            </div>
          </div>

          {/* Controles de planificaci√≥n */}
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <>
            <div className="flex justify-between items-center mb-6">
              <div>
                  <h2 className="text-xl font-semibold text-gray-900">Programaci√≥n Semanal</h2>
                  <p className="text-gray-600">Gestiona las programaciones de personal para toda la semana</p>
          </div>
              <div className="flex space-x-3">
                <div className="flex rounded-lg border border-gray-300 overflow-hidden">
                  <button
                    onClick={() => setVistaTabla('jerarquica')}
                    className={`px-3 py-2 text-sm font-medium transition-colors ${
                      vistaTabla === 'jerarquica'
                        ? 'bg-blue-600 text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    Vista Jer√°rquica
                  </button>
                  <button
                    onClick={() => setVistaTabla('simple')}
                    className={`px-3 py-2 text-sm font-medium transition-colors ${
                      vistaTabla === 'simple'
                        ? 'bg-blue-600 text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    Vista Simple
                  </button>
                </div>
                <button
                  onClick={handleExportarPDF}
                  disabled={programacion.length === 0}
                  className="flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium transition-colors"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Exportar PDF
                </button>
                
                <button
                  onClick={async () => {
                    // eslint-disable-next-line no-console
                    console.log('üîÑ Recargando programaci√≥n manualmente...');
                    await queryClient.refetchQueries({ 
                      queryKey: ['programacion'] 
                    });
                    // eslint-disable-next-line no-console
                    console.log('‚úÖ Programaci√≥n recargada');
                  }}
                  className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm font-medium transition-colors"
                >
                  <Calendar className="h-4 w-4 mr-2" />
                  Recargar Programaci√≥n
                </button>
                <div className="flex space-x-2">
                  <button
                    onClick={() => {
                      // eslint-disable-next-line no-console
                      console.log('üîÑ Refrescando datos de programaci√≥n...');
                      // Invalidar queries para refrescar los datos
                      queryClient.invalidateQueries({ queryKey: ['programacion'] });
                      queryClient.invalidateQueries({ queryKey: ['programacion', 'semana', 0, fechaInicioSemana.toISOString().split('T')[0]] });
                      queryClient.invalidateQueries({ queryKey: ['carteras'] });
                      queryClient.invalidateQueries({ queryKey: ['personal'] });
                    }}
                    className="flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Refresh
                  </button>
                </div>
        </div>
      </div>


            {/* Loading state */}
            {isLoadingProgramacion && (
              <div className="flex justify-center items-center py-12">
                <LoadingSpinner />
                <span className="ml-2 text-gray-600">Cargando programaci√≥n...</span>
              </div>
            )}

            {/* Error state */}
            {errorProgramacion && (
              <div className="text-center py-12">
                <XCircle className="h-16 w-16 text-red-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">Error al cargar programaci√≥n</h3>
                <p className="text-gray-600 mb-6">No se pudo cargar la programaci√≥n de la semana</p>
              </div>
            )}

            {/* Programaci√≥n semanal */}
            {!isLoadingProgramacion && !errorProgramacion && programacion.length > 0 && (
              <div className="space-y-6">
                {/* Dashboard de estad√≠sticas moderno */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                  <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-3xl font-bold">{programacion.length}</div>
                        <div className="text-blue-100 text-sm font-medium">Total Programaciones</div>
                      </div>
                      <div className="bg-blue-400 bg-opacity-30 rounded-full p-3">
                        <Calendar className="h-6 w-6" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-3xl font-bold">{getTrabajadoresUnicos().length}</div>
                        <div className="text-green-100 text-sm font-medium">Personal Programado</div>
                      </div>
                      <div className="bg-green-400 bg-opacity-30 rounded-full p-3">
                        <Users className="h-6 w-6" />
                      </div>
                    </div>
                  </div>
                  
                  
                  <div className="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-3xl font-bold">{calcularTotalHoras()}</div>
                        <div className="text-purple-100 text-sm font-medium">Total Horas</div>
                      </div>
                      <div className="bg-purple-400 bg-opacity-30 rounded-full p-3">
                        <Calendar className="h-6 w-6" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-3xl font-bold">
                          {new Set(programacion.map((p: any) => p.cliente_id).filter(Boolean)).size}
                        </div>
                        <div className="text-orange-100 text-sm font-medium">Clientes √önicos</div>
                      </div>
                      <div className="bg-orange-400 bg-opacity-30 rounded-full p-3">
                        <Users className="h-6 w-6" />
                      </div>
                    </div>
                  </div>
                </div>


                {/* Tabla de programaci√≥n moderna */}
                {vistaTabla === 'jerarquica' ? (
                  /* Vista Jer√°rquica Moderna */
                  <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
                    <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200">
                      <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                        <Calendar className="h-5 w-5 mr-2 text-blue-600" />
                        Programaci√≥n Semanal
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {formatearFecha(fechaInicioSemana)} - {formatearFecha(new Date(fechaInicioSemana.getTime() + 6 * 24 * 60 * 60 * 1000))}
                      </p>
                    </div>
                    
                    <div className="overflow-x-auto">
                      {/* Header de la tabla moderno */}
                      <div className="grid grid-cols-10 bg-gradient-to-r from-blue-50 to-indigo-50 border-b-2 border-blue-200">
                        <div className="px-4 py-4 text-left text-sm font-semibold text-blue-900 border-r border-blue-200">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                            Cartera
                          </div>
                        </div>
                        <div className="px-4 py-4 text-left text-sm font-semibold text-blue-900 border-r border-blue-200">
                          <div className="flex items-center">
                            <Users className="h-4 w-4 mr-2" />
                            Personal
                          </div>
                        </div>
                        <div className="px-4 py-4 text-left text-sm font-semibold text-blue-900 border-r border-blue-200">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                            Destino
                          </div>
                        </div>
                        {getDiasSemana().map((dia) => (
                          <div key={`dia-${dia.nombre}-${dia.numero}`} className="px-3 py-4 text-center border-r border-blue-200 last:border-r-0">
                            <div className="text-sm font-semibold text-blue-900 mb-1">{dia.nombre}</div>
                            <div className="text-lg font-bold text-blue-800">{dia.numero}</div>
                            <div className="text-xs text-blue-600">{dia.mes}</div>
                          </div>
                        ))}
                      </div>

                      {/* Contenido de la tabla */}
                      <div className="divide-y divide-gray-200">
                        {organizarDatosJerarquicos().map((cartera: any) => (
                          <div key={cartera.id} className={`${getColorCartera(cartera.nombre)}`}>
                            {Object.values(cartera.personal).map((persona: any, personaIndex: number) => (
                              <div key={persona.rut}>
                                {Object.values(persona.nodos).map((nodo: any, nodoIndex: number) => (
                                  <div key={`${nodo.clienteId}-${nodo.nodoId}`} className="grid grid-cols-10 border-b border-gray-200 hover:bg-gray-50">
                                    {/* Columna Cartera */}
                                    <div className="px-4 py-3 text-sm font-medium text-gray-900 border-r border-gray-200 flex items-center">
                                      {personaIndex === 0 && nodoIndex === 0 && (
                                        <span className="font-bold">{cartera.nombre}</span>
                                      )}
                                    </div>
                                    
                                    {/* Columna IS (Personal) */}
                                    <div className="px-4 py-3 text-sm text-gray-900 border-r border-gray-200 flex items-center">
                                      {nodoIndex === 0 && (
                                        <div>
                                          <div className="font-medium">{persona.nombre}</div>
                                          <div className="text-xs text-gray-500">{persona.cargo}</div>
                                        </div>
                                      )}
                                    </div>
                                    
                                    {/* Columna Nodo */}
                                    <div className="px-4 py-3 text-sm text-gray-900 border-r border-gray-200 flex items-center">
                                      <div>
                                        {nodo.clienteNombre && (
                                          <div className="font-medium">{nodo.clienteNombre}</div>
                                        )}
                                        {nodo.nodoNombre && (
                                          <div className="text-xs text-gray-500">{nodo.nodoNombre}</div>
                                        )}
                                      </div>
                                    </div>
                                    
                                    {/* Columnas de d√≠as modernas */}
                                    {getDiasSemana().map((dia, diaIndex) => {
                                      const diaKey = ['domingo', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado'][diaIndex];
                                      const estaAsignado = nodo.asignaciones[diaKey];
                                      
                                      return (
                                        <div key={`${persona.rut}-${nodo.clienteId}-${nodo.nodoId}-${diaKey}`} className="px-3 py-4 text-center border-r border-gray-200 last:border-r-0">
                                          {estaAsignado ? (
                                            <div className="flex items-center justify-center">
                                              <div className="relative group">
                                                <div className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105 cursor-pointer">
                                                  <div className="text-sm font-semibold">
                                                    {persona.nombre.split(' ')[0]}
                                                  </div>
                                                  <div className="text-xs opacity-90">
                                                    Asignado
                                                  </div>
                                                </div>
                                                {/* Tooltip */}
                                                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                                                  {persona.nombre} - {nodo.clienteNombre}
                                                  {nodo.nodoNombre && ` - ${nodo.nodoNombre}`}
                                                </div>
                                              </div>
                                            </div>
                                          ) : (
                                            <div className="flex items-center justify-center">
                                              <div className="w-8 h-8 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center">
                                                <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
                                              </div>
                                            </div>
                                          )}
                                        </div>
                                      );
                                    })}
                                  </div>
                                ))}
                              </div>
                            ))}
                          </div>
                        ))}
                  </div>
                </div>
              </div>
            ) : (
                  /* Vista Simple */
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white border border-gray-200 rounded-lg">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Trabajador
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Cliente/Nodo
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Lun
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Mar
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Mi√©
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Jue
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Vie
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            S√°b
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Dom
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Horas
                          </th>
                          <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Estado
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {programacion.map((item: any) => (
                          <tr key={item.id} className="hover:bg-gray-50">
                            <td className="px-4 py-4 whitespace-nowrap">
                              <div>
                                <div className="text-sm font-medium text-gray-900">{item.nombre_persona}</div>
                                <div className="text-sm text-gray-500">{item.cargo}</div>
                              </div>
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap">
                              <div>
                                {item.nombre_cliente && (
                                  <div className="text-sm font-medium text-gray-900">{item.nombre_cliente}</div>
                                )}
                                {item.nombre_nodo && (
                                  <div className="text-sm text-gray-500">{item.nombre_nodo}</div>
                                )}
                              </div>
                            </td>
                            {['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'].map((dia) => (
                              <td key={dia} className="px-4 py-4 whitespace-nowrap text-center">
                                <button
                                  onClick={() => handleAlternarDia(item.id, dia)}
                                  disabled={isUpdating}
                                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                                    item[dia]
                                      ? 'bg-green-100 text-green-800 hover:bg-green-200'
                                      : 'bg-gray-100 text-gray-400 hover:bg-gray-200'
                                  } ${isUpdating ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                                >
                                  {item[dia] ? <CheckCircle className="h-4 w-4" /> : <XCircle className="h-4 w-4" />}
                                </button>
                              </td>
                            ))}
                            <td className="px-4 py-4 whitespace-nowrap text-center">
                              <span className="text-sm font-medium text-gray-900">{item.horas_estimadas}h</span>
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap text-center">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                item.estado === 'programado' ? 'bg-blue-100 text-blue-800' :
                                item.estado === 'confirmado' ? 'bg-green-100 text-green-800' :
                                item.estado === 'en_progreso' ? 'bg-yellow-100 text-yellow-800' :
                                item.estado === 'completado' ? 'bg-green-100 text-green-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {item.estado}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}

            {/* Empty state */}
            {!isLoadingProgramacion && !errorProgramacion && programacion.length === 0 && (
              <div className="text-center py-12">
                <Calendar className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No hay programaci√≥n</h3>
                <p className="text-gray-600 mb-6">
                  No hay programaciones para ninguna cartera en esta semana
                </p>
              </div>
            )}

            </>
            </div>
        </div>
      )}

      {/* Modal de Asignaci√≥n de Personal */}
      {showAsignacionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-lg font-semibold">Asignar Personal</h3>
              <button
                onClick={handleCerrarAsignacionModal}
                className="text-gray-400 hover:text-gray-600"
              >
                <XCircle className="h-6 w-6" />
              </button>
            </div>

            <div className="space-y-6">
              {/* Informaci√≥n de la semana */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">Semana de Programaci√≥n</h4>
                <p className="text-blue-700">
                  {formatearFecha(fechaInicioSemana)} - {formatearFecha(new Date(fechaInicioSemana.getTime() + 6 * 24 * 60 * 60 * 1000))}
                </p>
              </div>

              {/* Formulario */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Cartera */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cartera *
                  </label>
                  <select
                    value={asignacionForm.carteraId}
                    onChange={(e) => handleCambiarFormulario('carteraId', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value={0}>Seleccionar Cartera</option>
                    {carterasData?.data?.map((cartera: any) => (
                      <option key={cartera.id} value={cartera.id}>
                        {cartera.nombre}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Cliente */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cliente
                  </label>
                  <select
                    value={asignacionForm.clienteId}
                    onChange={(e) => {
                      const clienteId = parseInt(e.target.value);
                      handleCambiarFormulario('clienteId', clienteId);
                      handleCambiarFormulario('nodoId', 0); // Reset nodo when cliente changes
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={!asignacionForm.carteraId}
                  >
                    <option value={0}>Seleccionar Cliente (Opcional)</option>
                    {clientesData?.data?.filter((cliente: any) => 
                      asignacionForm.carteraId === 0 || cliente.cartera_id === asignacionForm.carteraId
                    ).map((cliente: any) => (
                      <option key={cliente.id} value={cliente.id}>
                        {cliente.nombre}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Nodo */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nodo
                  </label>
                  <select
                    value={asignacionForm.nodoId}
                    onChange={(e) => handleCambiarFormulario('nodoId', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={!asignacionForm.clienteId}
                  >
                    <option value={0}>Seleccionar Nodo (Opcional)</option>
                    {nodosByClienteData?.data?.map((nodo: any) => (
                      <option key={nodo.id} value={nodo.id}>
                        {nodo.nombre}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Personal */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Personal *
                  </label>
                  <select
                    value={asignacionForm.personalId}
                    onChange={(e) => handleCambiarFormulario('personalId', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seleccionar Personal</option>
                    {personalData?.data?.items?.map((persona: any) => (
                      <option key={persona.rut} value={persona.rut}>
                        {persona.nombres || `${persona.nombre || ''} ${persona.apellido || ''}`.trim()} - {persona.rut}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Horas Estimadas */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Horas Estimadas por D√≠a
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="24"
                    value={asignacionForm.horasEstimadas}
                    onChange={(e) => handleCambiarFormulario('horasEstimadas', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              {/* D√≠as de la semana */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  D√≠as de Trabajo *
                </label>
                <div className="grid grid-cols-7 gap-2">
                  {getDiasSemana().map((dia, index) => {
                    const diaKey = ['domingo', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado'][index];
                    return (
                      <div key={diaKey} className="text-center">
                        <label className="block text-xs text-gray-600 mb-1">
                          {dia.nombre}
                        </label>
                        <label className="block text-xs font-medium text-gray-800 mb-2">
                          {dia.numero}
                        </label>
                        <input
                          type="checkbox"
                          checked={asignacionForm.dias[diaKey as keyof typeof asignacionForm.dias]}
                          onChange={(e) => handleCambiarDia(diaKey, e.target.checked)}
                          className="w-6 h-6 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Observaciones */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Observaciones
                </label>
                <textarea
                  value={asignacionForm.observaciones}
                  onChange={(e) => handleCambiarFormulario('observaciones', e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Observaciones adicionales..."
                />
              </div>
            </div>

            {/* Botones */}
            <div className="flex space-x-3 mt-6 pt-6 border-t border-gray-200">
              <button
                onClick={handleCerrarAsignacionModal}
                className="flex-1 bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors"
              >
                Cancelar
              </button>
            <button
                onClick={handleCrearAsignacion}
                disabled={isCreating}
                className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors flex items-center justify-center"
              >
                {isCreating ? (
                  <>
                    <LoadingSpinner />
                    <span className="ml-2">Creando...</span>
                  </>
                ) : (
                  'Crear Asignaci√≥n'
                )}
            </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Programaci√≥n con Calendario */}
      <ProgramacionCalendarioModal
        isOpen={showProgramacionCalendarioModal}
        onClose={() => setShowProgramacionCalendarioModal(false)}
        onSuccess={(asignaciones) => {
          // eslint-disable-next-line no-console
          console.log('Programaci√≥n guardada:', asignaciones);
          // Refrescar los datos de la tabla
          queryClient.invalidateQueries({ queryKey: ['programacion'] });
          queryClient.invalidateQueries({ queryKey: ['programacion', 'semana', 0, fechaInicioSemana.toISOString().split('T')[0]] });
          // Cerrar el modal
          setShowProgramacionCalendarioModal(false);
        }}
        carteras={carterasServicios || carterasData?.data || []}
        clientes={clientesServicios || clientesData?.data || []}
        nodos={nodosServicios || nodosData?.data || []}
        personal={personalData?.data?.items || []}
        carteraId={0}
        semanaInicio={fechaInicioSemana.toISOString().split('T')[0]}
      />

      {/* Tabla de Programaciones Semanales */}
      <div className="mt-8 bg-white rounded-lg shadow-lg border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 flex items-center">
            <Calendar className="h-5 w-5 mr-2 text-blue-600" />
            Programaciones de la Semana
          </h3>
          <p className="text-sm text-gray-600 mt-1">
            {formatearFecha(fechaInicioSemana)} - {formatearFecha(new Date(fechaInicioSemana.getTime() + 6 * 24 * 60 * 60 * 1000))}
          </p>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Personal
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cartera
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cliente
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nodo
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Lunes
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Martes
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Mi√©rcoles
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Jueves
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Viernes
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  S√°bado
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Domingo
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Total D√≠as
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {programacion.length === 0 ? (
                <tr>
                  <td colSpan={12} className="px-6 py-12 text-center text-gray-500">
                    <div className="flex flex-col items-center">
                      <Calendar className="h-12 w-12 text-gray-300 mb-4" />
                      <p className="text-lg font-medium text-gray-900 mb-2">No hay programaciones</p>
                      <p className="text-sm text-gray-600 mb-4">
                        No se han encontrado programaciones para esta semana
                      </p>
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-md">
                        <p className="text-sm text-blue-800 mb-2">
                          <strong>üí° Informaci√≥n:</strong>
                        </p>
                        <p className="text-xs text-blue-700">
                          Las programaciones se crean correctamente, pero pueden no aparecer inmediatamente debido a la configuraci√≥n del backend. 
                          Usa el bot√≥n "Refresh" para actualizar los datos.
                        </p>
                      </div>
                    </div>
                  </td>
                </tr>
              ) : (
                programacion.map((prog: any, index: number) => {
                  const diasTrabajados = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo']
                    .filter(dia => prog[dia]).length;
                  
                  return (
                    <tr key={prog.id || index} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mr-3">
                            <span className="text-white text-sm font-semibold">
                              {prog.nombre_personal?.charAt(0) || prog.rut?.charAt(0) || 'U'}
                            </span>
                          </div>
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {prog.nombre_personal || 'Sin nombre'}
                            </div>
                            <div className="text-sm text-gray-500">{prog.rut}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {prog.cartera_nombre || 'Sin cartera'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prog.cliente_nombre || '-'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prog.nodo_nombre || '-'}
                      </td>
                      {['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'].map(dia => (
                        <td key={dia} className="px-6 py-4 whitespace-nowrap text-center">
                          {prog[dia] ? (
                            <div className="flex items-center justify-center">
                              <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                                <CheckCircle className="h-4 w-4 text-white" />
                              </div>
                            </div>
                          ) : (
                            <div className="flex items-center justify-center">
                              <div className="w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center">
                                <XCircle className="h-4 w-4 text-gray-400" />
                              </div>
                            </div>
                          )}
                        </td>
                      ))}
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          {diasTrabajados} d√≠as
                        </span>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>

        {/* Resumen de la semana */}
        {programacion.length > 0 && (
          <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{programacion.length}</div>
                <div className="text-sm text-gray-600">Total Programaciones</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {new Set(programacion.map((p: any) => p.rut)).size}
                </div>
                <div className="text-sm text-gray-600">Personal √önico</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {programacion.reduce((total: number, p: any) => {
                    return total + ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo']
                      .filter(dia => p[dia]).length;
                  }, 0)}
                </div>
                <div className="text-sm text-gray-600">Total D√≠as Asignados</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">
                  {new Set(programacion.map((p: any) => p.cartera_id).filter(Boolean)).size}
                </div>
                <div className="text-sm text-gray-600">Carteras Activas</div>
              </div>
            </div>
          </div>
        )}
      </div>

    </div>
  );
};